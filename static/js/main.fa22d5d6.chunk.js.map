{"version":3,"sources":["logo.svg","components/GradeDisplayComponent.js","components/HomeComponent.js","components/ResultComponent.js","components/GradeBreakdowns.js","components/GradeComponent.js","components/GradeCalculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GradeDisplayComponent","state","optn","props","option","console","log","this","name","percent","React","Component","HomeComponent","options","compinfo","event","target","value","compOptn","isNaN","alert","setState","prevState","count","i","length","parseInt","window","location","reload","className","map","type","placeholder","title","onChange","e","handleChange","pattern","onClick","addComp","to","pathname","breakdown","allOptionsGood","GradeBreakdowns","GradeComponent","breakdowns","genlist","GradeCalculator","path","exact","component","ResultComponent","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fa22d5d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport default class GradeDisplayComponent extends React.Component {\n  state = {\n    optn: this.props.option\n  }\n\n  render() {\n    console.log(this.state.optn)\n    return(\n      <tr>\n      <td>{this.state.optn.name}</td>\n      <td>{this.state.optn.percent}</td>\n      </tr>\n    )\n  }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport GradeDisplayComponent from \"./GradeDisplayComponent\";\n\nexport default class HomeComponent extends React.Component {\n\n  state = {\n    options: [],\n    compinfo: {\n      name: \"\",\n      percent: \"\"\n    }\n  }\n\n  handleChange(event) {\n    return event.target.value\n  }\n\n  addComp() {\n    console.log(\"Ayy\")\n    const compOptn = this.state.compinfo\n\n    if (isNaN(compOptn.percent)) {\n      alert(\"Percent must be a number\")\n    } else {\n    this.setState((prevState) => {\n      return {\n        options: [\n          ...prevState.options,\n          compOptn\n        ]\n      }\n    })\n  }\n  console.log(this.state.options)\n  }\n\n  allOptionsGood() {\n    let count = 0;\n    for(let i = 0; i < this.state.options.length; i++) {\n      count += parseInt(this.state.options[i].percent)\n    }\n    if (count != 100) {\n      alert(\"Percentages should add up to 100!\");\n      window.location.reload(false);\n    }\n  }\n\n  render() {\n\n    if (1 == 2) {\n\n    }\n    return(\n      <div className=\"container\">\n      <h2> Please input your grade breakdown here </h2>\n      <table>\n        <thead>\n          <tr>\n            <th> Grade Options </th>\n            <th> Percent of grade </th>\n          </tr>\n        </thead>\n        <tbody>\n        {\n\n        this.state.options.map(optn =>\n        <GradeDisplayComponent\n          option={optn}/>)\n        }\n        </tbody>\n      </table>\n      <input type=\"text\" placeholder=\"e.g. Assignments\" title=\"Name of subgroup of grades\"\n        value={this.state.compinfo.name}\n        onChange={(e) => this.setState({compinfo: {percent: this.state.compinfo.percent, name: this.handleChange(e)}})}/>\n      <input type=\"text\" pattern=\"[0-9]*\" title=\"How much it is worth\"\n        value={this.state.compinfo.percent}\n        onChange={(e) => this.setState({compinfo: {name: this.state.compinfo.name, percent: this.handleChange(e)}})}/>\n      <button className=\"btn\" onClick={() => this.addComp()}>Add This</button>\n      <Link to={{pathname: '/grades', breakdown: this.state.options}}><button type=\"button\" onClick={() => this.allOptionsGood()}>Enter specifics</button></Link>\n\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport default class HomeComponent extends React.Component {\n  render() {\n    return(\n      <div className=\"container\">\n        <h2> Here are the results </h2>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nexport default class GradeBreakdowns extends React.Component {\n\n  state = {\n    breakdown: this.props.breakdown\n  }\n\n  render() {\n    return(\n        <li>{this.state.breakdown.name} is worth {this.state.breakdown.percent} percent</li>\n    )\n  }\n}\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport GradeBreakdowns from \"./GradeBreakdowns\";\n\nexport default class GradeComponent extends React.Component {\n\n  state = {\n    breakdowns: this.props.location.breakdown,\n    genlist: []\n  }\n\n\n  render() {\n    console.log(this.props.location.breakdown)\n    return(\n      <div className=\"container\">\n      <h2> Please input grades for each category </h2>\n\n      <ul>\n        {\n\n        this.state.breakdowns.map(optn =>\n        <GradeBreakdowns\n          breakdown={optn}/>)\n        }\n      </ul>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport HomeComponent from \"./HomeComponent\"\nimport ResultComponent from \"./ResultComponent\"\nimport GradeComponent from \"./GradeComponent\"\n\nclass GradeCalculator extends React.Component {\n  render() {\n    return(\n      <Router>\n        <div>\n          <h1> Grade Calculator</h1>\n\n          <Route\n            path='/gracecalculator'\n            exact={true}\n            component={HomeComponent}\n          />\n\n          <Route\n            path='/gracecalculator/grades'\n            exact={true}\n            component={GradeComponent}\n          />\n\n          <Route\n            path='/gracecalculator/results'\n            exact={true}\n            component={ResultComponent}/>\n\n          </div>\n        </Router>\n    )\n  }\n}\n\nexport default GradeCalculator\n","import React from 'react';\nimport logo from './logo.svg';\nimport GradeCalculator from './components/GradeCalculator';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <GradeCalculator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}